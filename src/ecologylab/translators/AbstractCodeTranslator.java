package ecologylab.translators;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;

import ecologylab.appframework.PropertiesAndDirectories;
import ecologylab.generic.Debug;
import ecologylab.serialization.ClassDescriptor;
import ecologylab.serialization.FieldDescriptor;
import ecologylab.serialization.MetaInformation;
import ecologylab.serialization.SimplTypesScope;

/**
 * Define the abstract structure of a code translator.
 * 
 * @author quyin
 *
 */
public abstract class AbstractCodeTranslator extends Debug implements CodeTranslator
{
	
	private final String		targetLanguage;

	public AbstractCodeTranslator(String targetLanguage)
	{
		this.targetLanguage = targetLanguage;
	}
	
	@Override
	public String getTargetLanguage()
	{
		return targetLanguage;
	}
	
	// - file comments
	/**
	 * Append class header comment.
	 * 
	 * @param className
	 *          The target class name.
	 * @param singleLineComment
	 *          The single line comment leading pattern.
	 * @param fileExtension
	 *          The extension of generated source code file (with dot).
	 * @param appendable
	 *          The appendable target.
	 * @throws IOException
	 */
	protected void appendHeaderComments(String className, String singleLineComment, String fileExtension, Appendable appendable) throws IOException
	{
		DateFormat dateFormat = new SimpleDateFormat("MM/dd/yy");
		DateFormat yearFormat = new SimpleDateFormat("yyyy");

		Date date = new Date();

		appendable.append(singleLineComment + "\n"
				+ singleLineComment + " " + className + fileExtension + "\n"
				+ singleLineComment + " s.im.pl serialization\n"
				+ singleLineComment + "\n"
				+ singleLineComment + " Generated by " + this.getClass().getSimpleName() /* + " on " + dateFormat.format(date) */ + ".\n"
				+ singleLineComment + " Copyright " + yearFormat.format(date)	+ " Interface Ecology Lab. \n"
				+ singleLineComment + "\n\n"
				);
	}

	// - unit scope (package / namespace) opening
	protected abstract void openUnitScope(String unitScopeName, Appendable appendable) throws IOException;

	// - class body opening (comments, annotations, definition, base, interfaces, generics, etc.)
	protected abstract void openClassBody(ClassDescriptor inputClass, Appendable appendable) throws IOException;
	protected abstract void appendClassComments(ClassDescriptor inputClass, Appendable appendable) throws IOException;
	protected abstract void appendStructuredComments(Appendable appendable, String spacing, String... comments) throws IOException;
	protected abstract void appendClassMetaInformation(ClassDescriptor inputClass, Appendable appendable) throws IOException;
	protected abstract void appendMetaInformation(MetaInformation metaInfo, Appendable appendable) throws IOException;
	protected abstract void appendClassMetaInformationHook(ClassDescriptor inputClass, Appendable appendable);
	protected abstract void appendClassGenericTypeVariables(Appendable appendable, ClassDescriptor inputClass) throws IOException;
	protected abstract void appendSuperClassGenericTypeVariables(Appendable appendable, ClassDescriptor inputClass) throws IOException;

	// - fields (comments, annotations, definition)
	protected abstract void appendField(ClassDescriptor context, FieldDescriptor fieldDescriptor, Appendable appendable) throws IOException, CodeTranslationException;
	protected abstract void appendFieldComments(FieldDescriptor fieldDescriptor, Appendable appendable) throws IOException;
	protected abstract void appendFieldMetaInformation(ClassDescriptor contextCd, FieldDescriptor fieldDescriptor, Appendable appendable) throws IOException;
	protected abstract void appendFieldMetaInformationHook(ClassDescriptor contextCd, FieldDescriptor fieldDesc, Appendable appendable) throws IOException;
	protected abstract void appendFieldGenericTypeVars(ClassDescriptor contextCd, FieldDescriptor fieldDescriptor, Appendable appendable) throws IOException;

	// - getters & setters
	protected abstract void appendGettersAndSetters(ClassDescriptor context, FieldDescriptor fieldDescriptor, Appendable appendable) throws IOException;
	protected abstract void appendGettersAndSettersHook(ClassDescriptor context, FieldDescriptor fieldDescriptor, Appendable appendable);

	// - constructor(s)
	protected abstract void appendConstructor(ClassDescriptor inputClass, Appendable appendable, String classSimpleName) throws IOException;
	protected abstract void appendDefaultConstructor(String className, Appendable appendable) throws IOException;
	protected abstract void appendConstructorHook(ClassDescriptor inputClass, Appendable appendable, String classSimpleName) throws IOException;

	// - class body closing
	protected abstract void closeClassBody(Appendable appendable) throws IOException;

	// - unit scope closing
	protected abstract void closeUnitScope(Appendable appendable) throws IOException;

	// - dependencies (usually can only be determined after going through fields)
	protected abstract void appendDependencies(Collection<String> dependencies, Appendable appendable) throws IOException;
	protected abstract void addGlobalDependency(String name);
	public abstract void addCurrentClassDependency(String name);
	protected abstract void addLibraryTScopeDependency(String name);

	// - library translation scope class
	public abstract void generateLibraryTScopeClass(File directoryLocation, SimplTypesScope tScope, String tScopeClassPackage, String tScopeClassSimpleName) throws IOException;
	protected abstract void appendTranslatedClassList(SimplTypesScope tScope, Appendable appendable) throws IOException;

	protected File createFileWithDirStructure(File parentDir, String[] dirStructure, String name, String extension)
			throws IOException
	{
		File dir = parentDir;
		for (String directoryName : dirStructure)
		{
			dir = new File(dir, directoryName);
		}
		PropertiesAndDirectories.createDirsAsNeeded(dir);
	
		File file = new File(dir, name + extension);
		if (file.exists())
			file.delete();
		file.createNewFile();
	
		return file;
	}

}
